library(MASS)
library(tidyverse)
####now look using BART####
library(dplyr)
##Simulation for Audit code##
####helper functions####
mBG_out<-c()
rho_list<-c(rep(0.25, 5), rep(0.4, 5), rep(0.6, 5), rep(0.8,5), 0.6)
gamma_list<-c(rep(seq(from=1, to=5, length.out=5), 4), .7)
ATE<-c()
tau.true<-c()
rho_guess<-c()
cor_list<-c()
for (m in 1:1){#length(gamma_list)){
N <- 30000 # Number of random samples
set.seed(0) #for variation in the x's
# Target parameters for univariate normal distributions
x1=runif(N, -2,2)
x2=runif(N, -2,2)
x3=runif(N,-2,2)
x4=runif(N,-2,2)
x5=runif(N, -2,2)
beta1= -0.2
alpha1= 0.7
beta0= -0
alpha0= -0.5
mu1 <- beta0+beta1*(x1+x2+x3+x4+x5)
mu2 <- alpha0+alpha1*(x1+x2+x3+x5)
mu<-matrix(c(mu1, mu2), nrow=N, ncol=2)
rho=rho_list[[m]]
gamma=gamma_list[[m]]
sigma <- matrix(c(1, rho,rho,1),
2) # Covariance matrix
sim_data=t(sapply(1:N, function(i)mvrnorm(1, mu = mu[i,], Sigma = sigma )))
#sim_data=mvrnorm(N, c(-1.6,-2.6), sigma)
G=sapply(1:N, function(i)ifelse(sim_data[i,1]>=0, 1,0))
B=sapply(1:N, function(i)ifelse(sim_data[i,2]>=-1*gamma*G[i], 1,0))
covariates=data.frame(x1,x2,x3,x4,x5,B, G)
vars=c('x1','x2','x3','x4','x5')
library(GJRM)
out<-gjrm(list(G ~x1+x2+x3+x4+x5,
B~ G+x1+x2+x3+x5),
data=covariates,
margins =c("probit", "probit"),
Model = "B"
)
rho_guess[[m]]=summary(out)[]$theta
tau.true[[m]] = pnorm(gamma+mu2) - pnorm(mu2)
cor_list[[m]]<-cor(out$fit$p00, tau.true[[m]])
ATE[[m]]<-AT(out, nm.end = "G", hd.plot = TRUE, n.sim = 1000)
print(m)
}
trueate_list<-sapply(1:21, function(i) mean(tau.true[[i]]))
ATE_est<-sapply(1:21, function(i) ATE[[i]]$res[2])
View(data.frame(round(trueate_list,3), round(ATE_est,3), gamma_list, rho_list, round(unlist(rho_guess),3)))
RMSE <- function(m, o){
sqrt(mean((m - o)^2))
}
source('~/research/audit_comp/audit_sim_codes/simulated_biprobit_regress.R', echo=TRUE)
source('~/research/audit_comp/audit_sim_codes/simulated_biprobit_nonlin.R', echo=TRUE)
p.int1 <- probm(eti1, out$margins[2], min.dn = out$VC$min.dn,
min.pr = out$VC$min.pr, max.pr = out$VC$max.pr)$pr
p.int0 <- probm(eti0, out$margins[2],  min.dn = out$VC$min.dn,
min.pr = out$VC$min.pr, max.pr = out$VC$max.pr)$pr
est.AT <- mean(p.int1, na.rm = TRUE) - mean(p.int0, na.rm = TRUE)
source('~/research/audit_comp/audit_sim_codes/simulated_biprobit_nonlin.R', echo=TRUE)
RR_guess
RR_truth
RMSE_RR
source('~/research/audit_comp/audit_sim_codes/simulated_biprobit_nonlin.R', echo=TRUE)
RMSE_RR
RR_truth
RR_guess
source('~/research/audit_comp/audit_sim_codes/simulated_biprobit_nonlin.R', echo=TRUE)
RMSE_RR
RMSE_guess
RR_guess
RMSE_RR
RR_guess
